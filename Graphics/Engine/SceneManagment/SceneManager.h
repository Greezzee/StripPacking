#pragma once
#include <vector>

#include "../SceneManagment/Scene.h"

/*!
* Система управления сценами - способ организации игровых окон, разделов и элементов.
* 
* В один момент могут существовать несколько сцен (по крайней мере 1)
* Если все сцены будут закрыты (удалены), то игра автоматически закрывается.
* 
* Каждая сцена по своей сути является элементом игры, который создаётся (инициализируется), обновляется каждый кадр и удаляется.
* Сцены обновляется последовательно в одном кадре, но каждый кадр обновляется каждая сцена, что приводит к иллюзии параллельной работы
* 
* Инициализация сцены, обновление и уничтожение производится согласно написанному вами коду в классах, дочерних классу Scene
* 
* Чтобы создать новую сцену, создайте её класс, дочерний классу Scene, определите функции Init, Update и Destroy, а также
* внесите новый элемент в enum SceneType, который будет отвечать нужной сцене. Затем в функции CreateScene добавьте опцию
* создания вашей новой сцены по аналогии с уже готовыми
* 
* Сцены могут свободно открывыть (создавать) и закрывать друг друга. В один момент могут существовать несколько сцен одного вида.
* Пожалуйста, будьте внимательны и не допускайте создания огромного количества сцен. ОНИ НЕ ЗАКРЫВАЮТСЯ АВТОМАТИЧЕСКИ.
* 
* НЕ ТРОГАТЬ
*/
class DataMessage;
class SceneManager
{
public:
	//! Добавляет новую сцену в активный список. scene уже инициализирован, память под неё выделена
	static void OpenScene(Scene* scene);

	//! Добавляет новую сцену в активный список. scene еще НЕ инициализирован, память под неё выделена
	static void CreateScene(Scene* scene);

	//! Удаляет сцену, вызывая её Destroy и очищая память
	static void CloseScene(const Scene* scene);;

	//! Вызывается каждый кадр автоматически, обновляет сцены. Вызов вручную опасен!
	static bool UpdateScenes();

	//static void SendData(const Scene* dest, const DataMessage& mes);

	//! Вызывается при закрытии игры, закрывает все сцены, очищает память
	static void Destroy();
private:
	static std::vector<Scene*> _current_scenes; //! Все текущие сцены
};

